name: Cross-Platform Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: ${{ matrix.job.os }} (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, binary: mikan }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, binary: mikan, use-cross: true }
          - { os: macos-latest, target: x86_64-apple-darwin, binary: mikan }
          - { os: macos-latest, target: aarch64-apple-darwin, binary: mikan }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, binary: mikan.exe }

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          target: ${{ matrix.job.target }}
          
      - name: Install protobuf compiler on Linux/macOS
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y protobuf-compiler
          else
            brew install protobuf
          fi
        shell: bash
        
      - name: Install protobuf compiler on Windows
        if: runner.os == 'Windows'
        run: |
          choco install protoc
        shell: cmd

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.job.target }}

      - name: Install cross (if needed)
        if: matrix.job.use-cross
        run: cargo install cross

      - name: Build binary
        run: |
          if [ "${{ matrix.job.use-cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mikan-${{ matrix.job.target }}
          path: target/${{ matrix.job.target }}/release/${{ matrix.job.binary }}

  # Only run release job when a tag is pushed
  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          cd artifacts
          for dir in */; do
            dir=${dir%/}
            cd "$dir"
            if [[ "$dir" == *windows* ]]; then
              7z a "../$dir.zip" *
            else
              tar czf "../$dir.tar.gz" *
            fi
            cd ..
          done
        shell: bash

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Mikan v${{ steps.get_version.outputs.VERSION }}
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
          draft: false
          prerelease: false